---
- name: save pkg filepath from automatic/manual download
  # save the `pkg_filepath`
  # parse the ghe version into https://semver.org format
  #   - pkg_full    2.15.3
  #   - pkg_major   2
  #   - pkg_minor   15
  #   - pkg_patch   3
  # is_hotpatch: do we have a (full) package upgrade `false` or a hotpatch `true`
  set_fact:
    pkg_filepath='{{ pkg_update_files.files[0].path }}'
    pkg_full="{{ pkg_update_files.files[0].path | regex_search('([0-9]+\.[0-9]+\.[0-9]+)') }}"
    pkg_major="{{ pkg_update_files.files[0].path | regex_search(version_regex,'\\1') | first }}"
    pkg_minor="{{ pkg_update_files.files[0].path | regex_search(version_regex,'\\2') | first }}"
    pkg_patch="{{ pkg_update_files.files[0].path | regex_search(version_regex,'\\3') | first }}"
    is_hotpatch="{{ pkg_update_files.files[0].path | basename | regex_search('(hpkg)$') == 'hpkg' }}"
  vars:
    version_regex: '([0-9]+)\.([0-9]+)\.([0-9]+)'
  when:
    - pkg_update_files is defined
    - pkg_update_files.matched != 0

- name: save pkg filepath from download
  # save the `pkg_filepath`
  # parse the ghe version into https://semver.org format
  #   - pkg_full    2.15.3
  #   - pkg_major   2
  #   - pkg_minor   15
  #   - pkg_patch   3
  # is_hotpatch: do we have a (full) package upgrade `false` or a hotpatch `true`
  set_fact:
    pkg_filepath="{{ pkg_download_files.stdout_lines | last | regex_search(path_regexp,'\\2') | first }}"
    pkg_full="{{ pkg_download_files.stdout_lines | last | regex_search('([0-9]+\.[0-9]+\.[0-9]+)') }}"
    pkg_major="{{ pkg_download_files.stdout_lines | last | regex_search(version_regex,'\\1') | first }}"
    pkg_minor="{{ pkg_download_files.stdout_lines | last | regex_search(version_regex,'\\2') | first }}"
    pkg_patch="{{ pkg_download_files.stdout_lines | last | regex_search(version_regex,'\\3') | first }}"
    is_hotpatch="{{ pkg_download_files.stdout_lines | last | basename | regex_search('(hpkg)$') == 'hpkg' }}"
  vars:
    path_regexp: '(-->.*)\s(\/.*\.(pkg|hpkg))'
    version_regex: '([0-9]+)\.([0-9]+)\.([0-9]+)'
  when:
    - pkg_download_files is defined
    - pkg_download_files.stdout is defined
    - '"Your GitHub Enterprise install is currently on the latest release." not in pkg_download_files.stdout'

- name: parse pkg file info
  debug:
    msg:
      - pkg_filepath: '{{ hostvars[inventory_hostname].pkg_filepath }}'
      - pkg_full: '{{ hostvars[inventory_hostname].pkg_full }}'
      - pkg_major: '{{ hostvars[inventory_hostname].pkg_major }}'
      - pkg_minor: '{{ hostvars[inventory_hostname].pkg_minor }}'
      - pkg_patch: '{{ hostvars[inventory_hostname].pkg_patch }}'
      - is_hotpatch: '{{ hostvars[inventory_hostname].is_hotpatch }}'
    verbosity: 1
  when:
    - pkg_filepath is defined

- name: currently on the latest release
  fail:
    msg: "[ABORT] Already on the latest release v{{ hostvars[inventory_hostname].version_full }}"
  when:
    - pkg_download_files is defined
    - pkg_download_files.stdout is defined
    - '"Your GitHub Enterprise install is currently on the latest release." in pkg_download_files.stdout'

- name: is upgrade to new feature version
  fail:
    msg: "[ABORT] upgrade to new feature version (v{{ hostvars[inventory_hostname].pkg_full }}) not allowed"
  when:
    - hostvars[inventory_hostname].pkg_patch is defined
    - hostvars[inventory_hostname].pkg_patch | int == 0

- name: compare download pkg versions
  fail:
    msg: "[ABORT] primary v{{ hostvars['primary'].pkg_full }} !== replica v{{ hostvars['replica'].pkg_full }}"
  when:
    - hostvars['primary'].pkg_full is defined
    - hostvars['replica'].pkg_full is defined
    - hostvars['primary'].pkg_full != hostvars['replica'].pkg_full
