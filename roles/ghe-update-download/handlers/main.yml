---
- name: save pkg filepath from predownload
  # save the `pkg_filepath`
  # parse the ghe version into https://semver.org format
  #   - pkg_version_full    2.15.3
  #   - pkg_version_major   2
  #   - pkg_version_minor   15
  #   - pkg_version_patch   3
  # is_hotpatch: do we have a (full) package upgrade `false` or a hotpatch `true`
  set_fact:
    pkg_filepath='{{ pkg_update_files.files[0].path }}'
    pkg_version_full="{{ pkg_update_files.files[0].path | regex_search('([0-9]+\.[0-9]+\.[0-9]+)') }}"
    pkg_version_major="{{ pkg_update_files.files[0].path | regex_search(version_regex,'\\1') | first }}"
    pkg_version_minor="{{ pkg_update_files.files[0].path | regex_search(version_regex,'\\2') | first }}"
    pkg_version_patch="{{ pkg_update_files.files[0].path | regex_search(version_regex,'\\3') | first }}"
    is_hotpatch="{{ pkg_update_files.files[0].path | basename | regex_search('(hpkg)$') == 'hpkg' }}"
  vars:
    version_regex: '([0-9]+)\.([0-9]+)\.([0-9]+)'
  when:
    - pkg_update_files is defined
    - pkg_update_files.matched != 0

- name: save pkg filepath from download
  # save the `pkg_filepath`
  # parse the ghe version into https://semver.org format
  #   - pkg_version_full    2.15.3
  #   - pkg_version_major   2
  #   - pkg_version_minor   15
  #   - pkg_version_patch   3
  # is_hotpatch: do we have a (full) package upgrade `false` or a hotpatch `true`
  set_fact:
    pkg_filepath="{{ pkg_download_files.stdout_lines | last | regex_search(path_regexp,'\\2') | first }}"
    pkg_version_full="{{ pkg_download_files.stdout_lines | last | regex_search('([0-9]+\.[0-9]+\.[0-9]+)') }}"
    pkg_version_major="{{ pkg_download_files.stdout_lines | last | regex_search(version_regex,'\\1') | first }}"
    pkg_version_minor="{{ pkg_download_files.stdout_lines | last | regex_search(version_regex,'\\2') | first }}"
    pkg_version_patch="{{ pkg_download_files.stdout_lines | last | regex_search(version_regex,'\\3') | first }}"
    is_hotpatch="{{ pkg_download_files.stdout_lines | last | basename | regex_search('(hpkg)$') == 'hpkg' }}"
  vars:
    path_regexp: '(-->.*)\s(\/.*\.(pkg|hpkg))'
    version_regex: '([0-9]+)\.([0-9]+)\.([0-9]+)'
  when:
    - pkg_download_files is defined
    - pkg_download_files.stdout is defined
    - '"Your GitHub Enterprise install is currently on the latest release." not in pkg_download_files.stdout'

- name: parse pkg file info
  debug:
    msg:
      - pkg_filepath: '{{ hostvars[inventory_hostname].pkg_filepath }}'
      - pkg_version_full: '{{ hostvars[inventory_hostname].pkg_version_full }}'
      - pkg_version_major: '{{ hostvars[inventory_hostname].pkg_version_major }}'
      - pkg_version_minor: '{{ hostvars[inventory_hostname].pkg_version_minor }}'
      - pkg_version_patch: '{{ hostvars[inventory_hostname].pkg_version_patch }}'
      - is_hotpatch: '{{ hostvars[inventory_hostname].is_hotpatch }}'
    verbosity: 1
  when:
    - pkg_filepath is defined

- name: currently on the latest release
  fail: msg="[ABORT] Already on the latest release v{{ hostvars[inventory_hostname].ghe_version_full }}"
  when:
    - pkg_download_files is defined
    - pkg_download_files.stdout is defined
    - '"Your GitHub Enterprise install is currently on the latest release." in pkg_download_files.stdout'
